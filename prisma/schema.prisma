// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?  @relation(fields: [profileId], references: [id])
  profileId     String?   @db.ObjectId

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Events {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  category    Json[]
  image       String
  comments    Json[]

  @@map("events")
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String
  posts    Posts[]
  user     User[]

  @@map("profile")
}

model Posts {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  description String
  likes       Int?
  createdAt   DateTime @default(now())
  Profile     Profile? @relation(fields: [profileId], references: [id])
  profileId   String?  @db.ObjectId

  @@map("posts")
}

// model Article {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   user     User    @relation(fields: [userId], references: [id])
//   image    String
//   headline String
//   content  String
//   date     String
//   likes    Int?
//   event    Events? @relation(fields: [eventsId], references: [id])

//   Profil   Profile? @relation(fields: [profilId], references: [id])
//   profilId String?  @db.ObjectId
//   userId   String   @db.ObjectId
//   eventsId String?  @db.ObjectId

//   @@map("articles")
// }
