// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// neon online db
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// local postgres
// datasource db {
//   provider = "postgresql"
//   url      = env("LOCAL_DB")
// }

// Account model
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Profile {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  comments      Comment[]
  posts         Post[]
  registrations Registration[]
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  startDate     DateTime
  endDate       DateTime
  category      String[]
  image         String
  location      String
  likes         Int?
  comments      Comment[]
  registrations Registration[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  profile   Profile  @relation(fields: [username], references: [username])
  username  String
  createdAt DateTime @default(now())
}

model Post {
  id          Int      @id @default(autoincrement())
  image       String
  description String
  createdAt   DateTime @default(now())
  profile     Profile  @relation(fields: [name], references: [username])
  name        String
  likes       Int?
}

model Registration {
  id          Int     @id @default(autoincrement())
  event       Event   @relation(fields: [eventId], references: [id])
  eventId     Int
  profile     Profile @relation(fields: [participant], references: [username])
  participant String
}

// model Events {
//   id          String   @id @default(autoincrement())
//   name        String
//   description String
//   startDate   DateTime
//   endDate     DateTime
//   category    Json[]
//   image       String
//   comments    Json[]
//   likes       Int?
// }

// model Profile {
//   id       String  @id @default(autoincrement())
//   username String
//   posts    Posts[]
//   user     User[]

//   @@map("profile")
// }

// model Posts {
//   id          String   @id @default(autoincrement())
//   image       String
//   description String
//   likes       Int?
//   createdAt   DateTime @default(now())
//   Profile     Profile? @relation(fields: [profileId], references: [id])
//   profileId   String?  @db.ObjectId

//   @@map("posts")
// }

// model Article {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   user     User    @relation(fields: [userId], references: [id])
//   image    String
//   headline String
//   content  String
//   date     String
//   likes    Int?
//   event    Events? @relation(fields: [eventsId], references: [id])

//   Profil   Profile? @relation(fields: [profilId], references: [id])
//   profilId String?  @db.ObjectId
//   userId   String   @db.ObjectId
//   eventsId String?  @db.ObjectId

//   @@map("articles")
// }
